local function longestRepeatedSubstring(str)
    local n = #str
    local LCSRe = {}
    for i = 1, n + 1 do
        LCSRe[i] = {}
    end

    local res = ""
    local res_length = 0

    local index = 0
    for i = 1, n do
        for j = i + 1, n do
            if (str:sub(i - 1, i - 1) == str:sub(j - 1, j - 1)
                and LCSRe[i - 1][j - 1] < (j - i)) then
                LCSRe[i][j] = LCSRe[i - 1][j - 1] + 1;

                if (LCSRe[i][j] > res_length) then
                    res_length = LCSRe[i][j];
                    index = math.max(i, index);
                end
            else
                LCSRe[i][j] = 0;
            end
        end
    end

    if (res_length > 0) then
        for i = index - res_length + 1, index do
            res = res .. str:sub(i - 1, i - 1)
        end
    end

    return res;
end

-- Driver program to test the above function

local sequence = { 1, 3, 2, 1, 2, 1, 3, 2, 2, 0, 1, 3, 2, 0, 2, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4,
    0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1,
    2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2,
    1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1,
    3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0,
    1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4,
    0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3,
    0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3,
    2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0,
    2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0,
    1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2,
    0, 1, 2, 1, 2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1,
    2, 0, 1, 3, 2, 0, 0, 1, 3, 3, 4, 0, 1, 2, 3, 0, 1, 1, 3, 2, 2, 0, 0, 2, 3, 4, 0, 1, 2, 1, 2, 0, 1, 2, 1, 2, 0, 1, 3,
    2, 0, 0, 1, 3, 3, 4 }

print(table.concat(sequence))
--print(longestRepeatedSubstring(table.concat(sequence)))
--print(longestRepeatedSubstring

local str
-- length = 1720
local mesuredHeight = 0
for i = 1, #str do
    mesuredHeight = mesuredHeight + tonumber(str:sub(i, i))
end
print("height of motif", mesuredHeight) -- 2626
-- index 186



str = "13032133401212002322133021332213340132111220012222133021230113240122221332213240001021234210002023001332002222003400030003040130401334013320021300232213302130101332013220130401302200222" -- prefix
mesuredHeight = 0
for i = 1, #str do
    mesuredHeight = mesuredHeight + tonumber(str:sub(i, i))
end
print("height of prefix", mesuredHeight) -- 297


print("nb occurences", math.floor((1000000000000 - 185) / 1720)) -- 581395348 occurences

local resteLength = 1000000000000 - 185 - 581395348*1720
print("Reste length", resteLength)
strprefix
mesuredHeight = 0
for i = 1, 1255 do
    mesuredHeight = mesuredHeight + tonumber(str:sub(i, i))
end

print("Height of suffix", mesuredHeight)
print(297 + 581395348*2626 + 1897)